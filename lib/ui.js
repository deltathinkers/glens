// Generated by CoffeeScript 1.4.0
var ui;

window.openLoadDialog = function() {
  return $('#loadModal').modal();
};

window.effectController = {
  gcodeIndex: 10,
  animate: false,
  motionLine: true,
  feedLine: true,
  feedIncLine: true,
  speed: 0,
  color: [0, 128, 255]
};

ui = (function() {
  var conf;

  ui.prototype.controllers = {
    gcodeIndex: null,
    animate: null
  };

  conf = {
    defaultFilePath: 'models/octocat.gcode'
  };

  ui.prototype.onGcodeLoaded = function(gcode) {
    this.renderer.onGcodeLoaded(gcode);
    return $('#loadModal').modal('hide');
  };

  function ui() {
    var _this = this;
    if (!Modernizr.webgl) {
      alert('Sorry, you need a WebGL capable browser to use this.');
      return false;
    }
    $('.gcode_examples a').on('click', function(e) {
      e.preventDefault();
      GCodeImporter.importPath($(e.target).attr('href'), _this.onGcodeLoaded.bind(_this));
      return false;
    });
    $('body').on('dragover', function(e) {
      e.stopPropagation();
      e.preventDefault();
      return e.originalEvent.dataTransfer.dropEffect = 'copy';
    });
    $('body').on('drop', function(e) {
      e.stopPropagation();
      e.preventDefault();
      return FileIO.load(event.originalEvent.dataTransfer.files, function(gcode) {
        return GCodeImporter.importText(gcode, this.onGcodeLoaded.bind(this));
      });
    });
    GCodeImporter.importPath(conf.defaultFilePath, this.onGcodeLoaded.bind(this));
    this.renderer = new Renderer($('#renderArea')[0], this);
    this.setupDatGUI();
  }

  ui.prototype.setupDatGUI = function() {
    var _this = this;
    this.dui = new dat.GUI();
    $('.dg.main').mousedown(function(e) {
      return e.stopPropagation();
    });
    this.controllers.animate = this.dui.add(effectController, 'animate').listen();
    this.controllers.motionLine = this.dui.add(effectController, 'motionLine').listen();
    this.controllers.feedLine = this.dui.add(effectController, 'feedLine').listen();
    this.controllers.feedIncLine = this.dui.add(effectController, 'feedIncLine').listen();
    this.controllers.gcodeIndex = this.dui.add(effectController, 'gcodeIndex', 0, 1000, 1000).listen();
    this.controllers.gcodeIndex.onChange(function(val) {
      if (effectController.animate) {
        return _this.controllers.animate.setValue(false);
      }
    });
    this.controllers.motionLine.onChange(function() {
      return _this.renderer.refreshObject();
    });
    this.controllers.feedLine.onChange(function() {
      return _this.renderer.refreshObject();
    });
    return this.controllers.feedIncLine.onChange(function() {
      return _this.renderer.refreshObject();
    });
  };

  return ui;

})();

$(function() {
  return window.ui = new ui;
});
